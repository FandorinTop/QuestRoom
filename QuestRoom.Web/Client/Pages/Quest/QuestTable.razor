@page "/Quest"
@using QuestRoom.ViewModel.Common
@using QuestRoom.ViewModel.Personal.Responce
@using QuestRoom.ViewModel.Quest.Responce
@inject NavigationManager NavManager

<div class="mat-layout-grid-inner">
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
        <h3>Quest Table</h3>
    </div>
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
    </div>
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
        <MatButton OnClick="@(item => NavManager.NavigateTo($"/manage/Quest/"))" Icon="create_new_folder" style="display: flex; justify-content: flex-end">Add</MatButton>
    </div>
</div>
<div>
    <p>
        <MatStringField Label="@FilterColumn" Outlined="true" @oninput="@(async (ChangeEventArgs e) => await SerchingFieldChange(e.Value.ToString()))"></MatStringField>
    </p>
</div>
<MatTable Items="ApiResult.Data"
          class="mat-elevation-z5"
          UseSortHeaderRow="true"
          ShowPaging="false"
          AllowSelection="true"
          SelectionChanged="@(async action => await SelectionChangedEvent(action))"
          @bind-PageSize="@Pagenator.PageSize">
    <MatTableHeader>
        <MatSortHeaderRow SortChanged="@SortData">
            <th>Action</th>
            <MatSortHeader SortId="Id">Id</MatSortHeader>
            <MatSortHeader SortId="Name">Name</MatSortHeader>
            <MatSortHeader SortId="Price">Price</MatSortHeader>
            <MatSortHeader SortId="CreatedAt">CreatedAt</MatSortHeader>
            <MatSortHeader SortId="MaxPlayerCount">MaxPlayerCount</MatSortHeader>
            <MatSortHeader SortId="MinPlayerCount">MinPlayerCount</MatSortHeader>
            <MatSortHeader SortId="Description">Description</MatSortHeader>
            <MatSortHeader SortId="AgeRestriction">AgeRestriction</MatSortHeader>
            <MatSortHeader SortId="Duration">Duration</MatSortHeader>
            <th>QuestType Name</th>
        </MatSortHeaderRow>
    </MatTableHeader>
    <MatTableRow>
        <td>
            <MatButton Raised="true" OnClick="@(async e => await Delete())" Icon="restore_from_trash"></MatButton>
            <MatButton Raised="true" Icon="edit" title="Edit" OnClick="@(item => NavManager.NavigateTo($"/manage/Quest/{@context.Id}"))"></MatButton>
        </td>
        <td>@context.Id</td>
        <td>@context.Name</td>
        <td>@context.Price</td>
        <td>@context.CreatedAt</td>
        <td>@context.MaxPlayerCount</td>
        <td>@context.MinPlayerCount</td>
        <td>@context.Description</td>
        <td>@context.AgeRestriction</td>
        <td>@context.Duration</td>
        <td>@context.Type</td>
    </MatTableRow>
</MatTable>
<MatPaginator Page="OnPage" @ref="matTablePagenator" @bind-Length="ApiResult.TotalCount">

</MatPaginator>

@code {
    MatPaginator matTablePagenator { get; set; } = null;
    private const string FilterColumn = nameof(GetQuestViewModel.Name);

    [Inject]
    HttpClient HttpClient { get; set; }

    [Inject]
    IJSRuntime JS { get; set; }


    public GetApiBodyRequest Pagenator { get; set; } = new GetApiBodyRequest()
        {
            PageIndex = 0,
            PageSize = 5,
        };

    public ApiResultViewModel<GetQuestViewModel> ApiResult { get; set; } = new ApiResultViewModel<GetQuestViewModel>();

    public async Task GetData()
    {
        var result = await HttpClient.PostAsJsonAsync("api/Quest/GetApiResponce", Pagenator);

        if (result.IsSuccessStatusCode)
        {
            ApiResult = await result.Content.ReadFromJsonAsync<ApiResultViewModel<GetQuestViewModel>>();
        }
        else
        {
            await JS.InvokeAsync<object>("alert", $"Error {await result.Content.ReadAsStringAsync()}");
        }
    }

    public async Task SortData(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            if (sort.Direction == MatSortDirection.Desc)
            {
                Pagenator.SortingRequests = new List<SortingRequest>()
                    {
                        new SortingRequest()
                        {
                            SortColumn = sort.SortId,
                            SortOrder = "DESC"
                        }
                    };
            }
            else
            {
                Pagenator.SortingRequests = new List<SortingRequest>()
                    {
                        new SortingRequest()
                        {
                            SortColumn = sort.SortId,
                            SortOrder = "ASC"
                        }
                    };
            }

            await GetData();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        matTablePagenator.PageIndex = Pagenator.PageIndex;
        matTablePagenator.PageSize = Pagenator.PageSize;
        matTablePagenator.Length = 100;

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnPage(MatPaginatorPageEvent e)
    {
        Pagenator.PageIndex = e.PageIndex;
        Pagenator.PageSize = e.PageSize;
        await GetData();
    }

    private async Task SerchingFieldChange(string value)
    {
        Pagenator.FilterRequests = new List<FilterRequest>()
        {
            new FilterRequest()
            {
                FilterColumn = FilterColumn,
                FilterQuery = value,
                IsPartFilter = true
            }
        };

        await GetData();
    }

    private bool _isDelete = false;
    private GetQuestViewModel Selected { get; set; }

    private async Task Delete()
    {
        _isDelete = true;
    }

    public async Task SelectionChangedEvent(object obj)
    {
        var actor = obj as GetQuestViewModel;

        if (actor != null)
        {
            Selected = actor;
            if (_isDelete)
            {
                await HttpClient.DeleteAsync($"api/Quest/delete?id=" + Selected.Id);
                await GetData();
                _isDelete = false;
                StateHasChanged();
            }
        }
    }
}